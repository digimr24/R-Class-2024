theme(legend.position = "none")
dev.off()
#dev off turns off the pdf maker
total_cov <- function(df) sum(df$value)
total_dat <- ddply(dat3,.(Year,Transect,variable),each(total_cov))
ggplot(total_dat,aes(Year,total_cov,colour=variable)) +
geom_point(size=1,alpha=.5) +
facet_wrap(~variable) +
theme_bw() +
scale_x_continuous(breaks = c(seq(2009,2019,2)))+
xlab("Transect year")+
ylab("Total coverage") +
theme(legend.position = "none")
ggplot(total_dat,aes(Year,total_cov,colour=variable)) +
geom_point(size=1,alpha=.5) +
facet_wrap(~variable,scales="free_y") +
theme_bw() +
scale_x_continuous(breaks = c(seq(2009,2019,2)))+
xlab("Transect year")+
ylab("Total coverage") +
theme(legend.position = "none")
ggplot(total_dat,aes(Year,total_cov,colour=variable)) +
geom_point(size=1,alpha=.5) +
facet_wrap(~variable,scales="free_y") +
theme_bw() +
scale_x_continuous(breaks = c(seq(2009,2019,2)))+
xlab("Transect year")+
ylab("Total coverage") +
theme(legend.position = "none")
ggplot(dat2,aes(Dead_coral,Turbinaria))  +
geom_smooth(method="lm") +
geom_point(alpha=.5,size=1) +
facet_wrap(~Year,scales="free")
mod <- lm(formula = Turbinaria ~ Dead_coral,  data=dat2)
#summarize model output
summary(mod)
mod <- lm(formula = Urchins ~ Dead_coral,  data=dat2)
#summarize model output
summary(mod)
mod <- lm(formula = Turbinaria ~ Dead_coral,  data=dat2)
#summarize model output
summary(mod)
mod <- lm(formula = Urchins ~ Dead_coral,  data=dat2)
#summarize model output
summary(mod)
mod <- lm(formula = Urchins ~ Live_coral,  data=dat2)
#summarize model output
summary(mod)
mod <- lm(formula = Cyanobacteria ~ Live_coral,  data=dat2)
#summarize model output
summary(mod)
subdat <- dat2[c(dat2$Year == 2014),]
rownames(subdat) <- paste(subdat$m_from_crest,subdat$Transect,sep="_")
quadrat <- subdat$m_from_crest
#  select only the variables we are interested in
mdsdat <- subset(subdat,select=c(Turbinaria,Sargassum,Halimeda,Coralline_algae,Live_coral,Dead_coral,Urchins,Holothurians))
# remove any missing (NA) values
mdsdat <- mdsdat[, colSums(is.na(mdsdat))==0]
# NMDS and most other ordination methods can't handle sites in which all measured values are zero, so let's include only rows in which at least two different  types of cover were observed
mdsdat$nonzero <- rowSums(mdsdat != 0)
mdsdat <- mdsdat[c(mdsdat$nonzero > 1),]
mdsdat <- subset(mdsdat,select=-c(nonzero))
# now run the analysis. k specifices the number of dimensions we would like to reduce  to
mds_out <- metaMDS(mdsdat,k=2)
# we can use built-in functions to plot the quadrats and the types of cover in this simplified 2D space -cover  types that  are far apart tend not to co-occur.  Quadrats that are near a particular cover type have high scores for that cover type.
ordiplot(mds_out,type="n")
orditorp(mds_out,display="species",col="red",air=0.01)
orditorp(mds_out,display="sites",cex=.5,col="blue",air=0.01)
mds_scores <-  as.data.frame(scores(mds_out)) #extract scores for each quadrat
mds_scores$site <- rownames(mds_scores) # create  a new variable that indicates the position and transect # of each quadrat
# below is some confusing code that you can mostly ignore unless you need to do this yourself
out <- strsplit(mds_scores$site,"_")
site_dat <- do.call(rbind,out)
colnames(site_dat) <- c("m_from_crest","transect")
mds_scores <- data.frame(mds_scores,site_dat)
mds_scores$m_from_crest <- as.numeric(as.character(mds_scores$m_from_crest))
species_scores <- as.data.frame(scores(mds_out,"species"))
species_scores$species <- rownames(species_scores)
# make the plot.  By including "colour=m_from_crest" in the aes() statement, we indicate that we want to map colour to this variable
ggplot() +
geom_text(data=mds_scores,aes(x=NMDS1,y=NMDS2,label=m_from_crest,colour=m_from_crest)) +
geom_text(data=species_scores,aes(x=NMDS1,y=NMDS2,label=species),colour="red") +
scale_colour_gradient2(low="yellow",mid="green3",high="blue4",midpoint = median(mds_scores$m_from_crest))
theme_bw()
subdat <- dat2[c(dat2$Year == 2014),]
rownames(subdat) <- paste(subdat$m_from_crest,subdat$Transect,sep="_")
quadrat <- subdat$m_from_crest
#  select only the variables we are interested in
mdsdat <- subset(subdat,select=c(Turbinaria,Sargassum,Halimeda,Coralline_algae,Live_coral,Dead_coral,Urchins,Holothurians))
# remove any missing (NA) values
mdsdat <- mdsdat[, colSums(is.na(mdsdat))==0]
head(mdsdat)
# NMDS and most other ordination methods can't handle sites in which all measured values are zero, so let's include only rows in which at least two different  types of cover were observed
mdsdat$nonzero <- rowSums(mdsdat != 0)
mdsdat <- mdsdat[c(mdsdat$nonzero > 1),]
mdsdat <- subset(mdsdat,select=-c(nonzero))
# now run the analysis. k specifices the number of dimensions we would like to reduce  to
mds_out <- metaMDS(mdsdat,k=2)
# we can use built-in functions to plot the quadrats and the types of cover in this simplified 2D space -cover  types that  are far apart tend not to co-occur.  Quadrats that are near a particular cover type have high scores for that cover type.
ordiplot(mds_out,type="n")
orditorp(mds_out,display="species",col="red",air=0.01)
orditorp(mds_out,display="sites",cex=.5,col="blue",air=0.01)
# NMDS and most other ordination methods can't handle sites in which all measured values are zero, so let's include only rows in which at least two different  types of cover were observed
mdsdat$nonzero <- rowSums(mdsdat != 0)
mdsdat <- mdsdat[c(mdsdat$nonzero > 1),]
mdsdat <- subset(mdsdat,select=-c(nonzero))
# now run the analysis. k specifices the number of dimensions we would like to reduce  to
mds_out <- metaMDS(mdsdat,k=3)
# we can use built-in functions to plot the quadrats and the types of cover in this simplified 2D space -cover  types that  are far apart tend not to co-occur.  Quadrats that are near a particular cover type have high scores for that cover type.
ordiplot(mds_out,type="n")
orditorp(mds_out,display="species",col="red",air=0.01)
orditorp(mds_out,display="sites",cex=.5,col="blue",air=0.01)
# NMDS and most other ordination methods can't handle sites in which all measured values are zero, so let's include only rows in which at least two different  types of cover were observed
mdsdat$nonzero <- rowSums(mdsdat != 0)
mdsdat <- mdsdat[c(mdsdat$nonzero > 1),]
mdsdat <- subset(mdsdat,select=-c(nonzero))
# now run the analysis. k specifices the number of dimensions we would like to reduce  to
mds_out <- metaMDS(mdsdat,k=2)
# we can use built-in functions to plot the quadrats and the types of cover in this simplified 2D space -cover  types that  are far apart tend not to co-occur.  Quadrats that are near a particular cover type have high scores for that cover type.
ordiplot(mds_out,type="n")
orditorp(mds_out,display="species",col="red",air=0.01)
orditorp(mds_out,display="sites",cex=.5,col="blue",air=0.01)
pdf("Temae_datatest.pdf",height=9,width=9)
mds_scores <-  as.data.frame(scores(mds_out)) #extract scores for each quadrat
mds_scores$site <- rownames(mds_scores) # create  a new variable that indicates the position and transect # of each quadrat
# below is some confusing code that you can mostly ignore unless you need to do this yourself
out <- strsplit(mds_scores$site,"_")
site_dat <- do.call(rbind,out)
colnames(site_dat) <- c("m_from_crest","transect")
mds_scores <- data.frame(mds_scores,site_dat)
mds_scores$m_from_crest <- as.numeric(as.character(mds_scores$m_from_crest))
species_scores <- as.data.frame(scores(mds_out,"species"))
species_scores$species <- rownames(species_scores)
# make the plot.  By including "colour=m_from_crest" in the aes() statement, we indicate that we want to map colour to this variable
ggplot() +
geom_text(data=mds_scores,aes(x=NMDS1,y=NMDS2,label=m_from_crest,colour=m_from_crest)) +
geom_text(data=species_scores,aes(x=NMDS1,y=NMDS2,label=species),colour="red") +
scale_colour_gradient2(low="yellow",mid="green3",high="blue4",midpoint = median(mds_scores$m_from_crest))
theme_bw()
dev.off()
head(size)
head(leng.shrimp)
```{r}
leng.shrimp <-- read.csv(Size.class.data)
head(leng.shrimp)
```
```{r}
leng.shrimp <-- read.csv("Size.class.data.csv", header=TRUE)
head(leng.shrimp)
```
leng.shrimp <-- read.csv("Size.class.data.csv", header=TRUE)
leng.shrimp <-- read.csv("Size.class.data.csv", header=TRUE)
head(leng.shrimp)
```{r}
leng.shrimp <-- read.csv("Size.class.data.csv", header=TRUE)
head(leng.shrimp)
```
library(Hmisc) # cut2
library(ggplot2)
leng.shrimp(cut_number(length), n=3)
library(ggplot2)
cut_number(length,n=3)
library(ggplot2)
cut_number(leng.shrimp,n=3)
library(ggplot2)
plot(leng.shrimp)
library(ggplot2)
plot(leng.shrimp,aes(x=length, y=animal))
```{r}
```{r}
ethogram.data <-read.csv(file = 'Ethogram.FAKE.csv')
```
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
ethodat <-read.csv("Ethogram_Final2.csv")
library(dplyr)
library(FSA)
#Test 1: Size class vs. %time exp.sub
shapiro.test(ethodat$P_Exp.Sub)
#not normal--use kruskal
kruskal.test(P_Exp.Sub ~ Size.Class, data= ethodat)
Sig.table.1 = dunnTest(P_Exp.Sub ~ Size.Class, data= ethodat, method= "bh")
# note: can use dimorph or size class and it will work the same
#SIGNIFICANT
#Test 2: Size class vs %time digging/burrow
shapiro.test(ethodat$P_D_B)
#not normal
kruskal.test(P_D_B ~ Size.Class, data= ethodat)
#when testing, all of the values were zero
#NOT SIG
#Test 3: Size class vs % Feeding
shapiro.test(ethodat$Feeding)
#not normally distrubuted
kruskal.test(P_Feeding ~ Size.Class, data= ethodat)
#close, but not sig
#Test 4: Size Class vs %time Autogrooming
shapiro.test(ethodat$P_Autogrooming)
# not normal
kruskal.test(P_Autogrooming ~ Size.Class, data= ethodat)
Sig.table.2 = dunnTest(P_Autogrooming ~ Size.Class, data= ethodat, method= "bh")
#significant, it looks like SM is very different
#Test 5: Size class vs. % time F/A
shapiro.test(ethodat$P_Feed_Auto)
#not normal
kruskal.test(P_Feed_Auto ~ Size.Class, data = ethodat)
#NOT SIG
#Test 6: Size class vs. % time sheltering
#assorted NORMALLY
kruskal.test(P_Sheltering ~ Size.Class, data = ethodat)
#NOT SIG
anova.shelt <-aov(P_Sheltering ~ Size.Class, data =ethodat)
summary(anova.shelt)
#NOT Sig
#Test 7: size class vs. % time swimming
shapiro.test(ethodat$P_Swimming)
#not normal
kruskal.test(P_Swimming ~ Size.Class, data =ethodat)
#Not SIG
#Test 8: size class vs % agonism
shapiro.test(ethodat$P_Ag.)
#not normally assorted
kruskal.test(P_Ag. ~ Size.Class, data = ethodat)
Sig.table.4 = dunnTest(P_Ag. ~ Size.Class, data= ethodat, method= "bh")
#SIG between two categories (1-3)
#Test 9: size class vs %inactive
shapiro.test(ethodat$P_In)
#not normal
kruskal.test(P_In ~ Size.Class, data = ethodat)
Sig.table.in = dunnTest(P_In ~ Size.Class,data=ethodat,method="bh")
#SIG, only not sig in 1-2 comparison
library(ggplot2)
ggplot(data=ethodat, mapping = aes(x=Dimorph, y=P_Exp.Sub, fill= Dimorph))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Substrate Exploration Varies by Morphotype", x="Morphotype", y="% of Time Budget")
#want to try to get out the no data ones for dimorph
#order you put them in is the order they show up
ggplot(data=ethodat, mapping = aes(x=Dimorph, y=P_Ag., fill= Dimorph))+
geom_boxplot(alpha=0.5)+
stat_summary()+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Agonism Varies by Morphotype", x="Morphotype", y="% of Time Budget")
ggplot(data=ethodat, mapping = aes(x=Dimorph, y=P_Ag., fill= Dimorph))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Agonism Varies by Morphotype", x="Morphotype", y="% of Time Budget")
ggplot(data=ethodat, mapping = aes(x=Dimorph, y=P_In, fill= Dimorph))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values= c("blue","orange","pink"))+theme_minimal() +labs(title="Inactivity by Morphotype", x="Morphotype", y="% of Time Budget")
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
ag_study <-read.csv("Agression_Study_full2.csv")
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=0.5)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Dimorphism",x="Dimorph",y="Attack Index")+
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=0.5)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Dimorphism",x="Dimorph",y="Attack Index")
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Morphotype",x="Morphotype",y="Attack Index")
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Morphotype",x="Morphotype",y="Attack Index")
+labs(fill="new title")
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Morphotype",x="Morphotype",y="Attack Index")
+scale_colour_discrete("NEw")
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Morphotype",x="Morphotype",y="Attack Index")+
scale_colour_discrete("NEw")
#NOT WORKING
library(ggplot2)
ggplot(ag_study,mapping= aes(x= Size_Class, y = Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()+labs(title="Attack Index Variation by Morphotype",x="Morphotype",y="Attack Index")+
scale_colour_discrete(name="New")
lmAgression = lm(Attack_Index ~ Size_Class, data = ag_study)
summary(lmAgression)
#using length now instead of class
library(ggplot2)
ggplot()+
geom_boxplot(data=ag_study, aes(x= Size_Class, y = Attack_Index))+
geom_smooth(data=ag_study, aes(x= Size_Class, y = Attack_Index),method='lm')+ theme(text = element_text(size=20))+
scale_fill_manual(values=c("blue","orange","pink"))+theme_minimal()
ggplot(data=ag_study,aes(x=Size_Class, y=Attack_Index, fill= Size_Class))+
geom_boxplot(alpha=1)+
stat_summary()+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Attack Index by Morphotype", x="Morphotype", y="Attack Index")+
theme(text= element_text(size=20))
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
etho.full.chart <-read.csv("Etho_full_rep.csv")
library(ggplot2)
etho.chart.long <- gather(etho.full.chart, Behavior, Percent_Time, 2:10)
ggplot(etho.chart.long,aes(fill=Morphotype,y = Percent_Time, x = Behavior))+
geom_bar(stat="identity",position="dodge")+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Ethogram Results", x="Behavior Category", y="Percent of Time Budget")+
theme(axis.text.x = element_text(angle= 45, hjust= 1, vjust= 1.2))+
theme(text = element_text(size=15))
library(ggplot2)
etho.chart.long <- gather(etho.full.chart, Behavior, Percent_Time, 2:10)
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
etho.full.chart <-read.csv("Etho_full_rep.csv")
library(tidyr)
library(ggplot2)
etho.chart.long <- gather(etho.full.chart, Behavior, Percent_Time, 2:10)
ggplot(etho.chart.long,aes(fill=Morphotype,y = Percent_Time, x = Behavior))+
geom_bar(stat="identity",position="dodge")+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Ethogram Results", x="Behavior Category", y="Percent of Time Budget")+
theme(axis.text.x = element_text(angle= 45, hjust= 1, vjust= 1.2))+
theme(text = element_text(size=15))
ggplot(etho.chart.long,aes(fill=Morphotype,y = Percent_Time, x = Behavior))+
geom_bar(stat="identity",position="dodge")+
scale_fill_manual(values= c("blue", "orange","pink"))+theme_minimal() +labs(title="Ethogram Results", x="Behavior Category", y="Percent of Time Budget")+
theme(axis.text.x = element_text(angle= 45, hjust= 1, vjust= 1.2))+
theme(text = element_text(size=10))
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
ag_2 <-read.csv("Ag_Bar_Stats.csv")
library(dplyr)
library(FSA)
shapiro.test(ag_2$At_sm)
#assorts normally, barely
shapiro.test(ag_2$At_oc)
#not normal
shapiro.test(ag_2$At_bc)
#not normal
#comparing means of attacking each type by each type
kruskal.test(At_sm ~ Size_Class, data = ag_2)
#very low P
sig.atsm <- dunnTest(At_sm ~ Size_Class, data= ag_2, method= "bh")
#bc to oc and bc to sm are sig but oc/sm is not
# so bc is more likely to attack sm than oc or other sm
#need to repeat two more times, currently working on graph
kruskal.test(At_oc ~ Size_Class, data = ag_2)
# p was high
kruskal.test(At_bc ~ Size_Class, data = ag_2)
#high p?
#comparing means of attacking each type by each type
kruskal.test(At_sm ~ Size_Class, data = ag_2)
#very low P
sig.atsm <- dunnTest(At_sm ~ Size_Class, data= ag_2, method= "bh")
#bc to oc and bc to sm are sig but oc/sm is not
# so bc is more likely to attack sm than oc or other sm
View(sig.atsm)
#need to repeat two more times, currently working on graph
kruskal.test(At_oc ~ Size_Class, data = ag_2)
# p was high
kruskal.test(At_bc ~ Size_Class, data = ag_2)
#high p?
View(anova.shelt)
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
ethodat <-read.csv("Ethogram_Final2.csv")
library(dplyr)
library(FSA)
#Test 6: Size class vs. % time sheltering
#assorted NORMALLY
kruskal.test(P_Sheltering ~ Size.Class, data = ethodat)
#NOT SIG
anova.shelt <-aov(P_Sheltering ~ Size.Class, data =ethodat)
summary(anova.shelt)
#NOT Sig
getwd()
setwd("/Users/madid/Desktop/Moorea 2021")
ag_2 <-read.csv("Ag_Bar_Stats.csv")
library(dplyr)
library(FSA)
shapiro.test(ag_2$At_f)
kruskal.test(At_f ~ Size_Class, data = ag_2)
kruskal.test(At_f ~ Size_Class, data = ag_2)
sig.atf <- dunnTest(At_f ~ Size_Class, data = ag_2, method = "bh")
View(sig.atf)
install.packages("swirl")
3+4
4*6
x <- 3*4
x
in
firstnumber <- x
thisIsAReallyLongName <- 2.5
thisIsAReallyLongName
Eight <- 2^3
Eight
eight
help(rnorm)
X <- rnorm(100,mean=5,sd=1.5)
mean(X)
sd(X)
seq(1,10)
seq(from=1,to=10,by=2)
yo <- "hello world"
y <- seq(1,10)
(y <- seq(1,10))
date()
objects()
ls()
rm(y)
rm(list=ls())
hello WorldPhones
knitr::opts_chunk$set(echo = TRUE)
df.m <- read.csv("WEEK_2/mammals.csv", header = TRUE)
str(df.m)
head(df.m)
df.m$continent[df.m$continent == "Af"] <- "AF"
error.index <- which(is.na(df.m$continent))
df.m$continent[error.index] <- "NA"
df.m$continent[df.m$continent == "Af"] <- "AF"
error.index <- which(is.na(df.m$continent))
df.m$continent[error.index] <- "NA"
table(df.m$continent)
df.m$continent <- factor(df.m$continent)
table(df.m$continent)
install.packages("fields") #downloading package for later in the lab
barplot(table(df.m$continent),
col = "blue",
cex.names = 0.8,
ylim = c(0,1600))
barplot(sort(table(df.m$continent),decreasing = TRUE), col = "blue", cex.names = 0.8,
ylim = c(0,1600), ylab = "Frequency")
par(mar = c(4,4,3,1)) # to adjust the plotting parameters
hist(df.m$mass.grams, col = "blue")
par(mar = c(4,4,3,1)) # to adjust the plotting parameters
hist(df.m$mass.grams^(1/3), col = "blue") #root transformation to adjust display of data
head(df.m)
df.m$logmass <- log10(df.m$mass.grams)
head(df.m)
h1 <- hist(df.m$logmass,
col = "blue",
breaks = seq(0,10, by =0.2), #this sets the width of the bars
freq = FALSE) # see answer for this function below
str(h1) # str will bring up the internal structure of the object
qqnorm(df.m$logmass) #creates the qqplot
qqline(df.m$logmass) #creates the line of best fit
boxplot(df.m$logmass ~ df.m$status)
boxplot(df.m$logmass ~ df.m$status,
ylab = "log10 body mass",
varwidth = TRUE, #this makes the width represent the number of observations in the group ( the square root of the number)
main = "body mass and status")
table(df.m$status) #shows the number of data points in each category, why extant is the largest
table(df.m$continent, df.m$status)
par(mar = c(1,2,2,1))
mosaicplot(table(df.m$continent, df.m$status),
col= TRUE,
las = 2,
cex.axis = 0.8,
main = "")
data(volcano)
contour(volcano)
filled.contour(volcano) #creates filled countour plot
image(volcano) #creates heatmap
if (("fields" %in% installed.packages())==FALSE){
install.packages("fields", dependencies=TRUE)
}
library(fields)
data(volcano)
image.plot(volcano)
library(viridisLite)
image.plot(volcano)
if (("fields" %in% installed.packages())==FALSE){
install.packages("fields", dependencies=TRUE)
}
library(fields)
if (("viridisLite" %in% installed.packages())==FALSE){
install.packages("viridisLite", dependencies=TRUE)
}
image.plot(volcano)
if (("fields" %in% installed.packages())==FALSE){
install.packages("fields", dependencies=TRUE)
}
library(fields)
library(viridisLite)
library(fields)
image.plot(volcano, col = viridis(n = 64))
if (("viridis" %in% installed.packages())==FALSE){
install.packages("viridis", dependencies=TRUE)
}
library(viridis)
image.plot(volcano, col = viridis(n = 64))
image.plot(volcano, col = viridis(n = 64))
image.plot(volcano, col = viridis(n = 64))
if (("viridis" %in% installed.packages())==FALSE){
install.packages("viridis", dependencies=TRUE)
}
library(fields)
rm(list=ls(all=TRUE))
setwd("C:/Users/madid/OneDrive/Documents/Desktop/RCourseExamples/R-Class-2024/WK03_Reproducibility")
getwd()
